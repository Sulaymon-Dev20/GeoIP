#!/bin/bash
###    IPv4 information based on MaxMind's GeoLite2 database     ###
### https://dev.maxmind.com/geoip/geolite2-free-geolocation-data ###

### Required files

DB='/usr/share/GeoIP/GeoLite2-City-Blocks-IPv4.csv'
LOCATIONS='/usr/share/GeoIP/GeoLite2-City-Locations-en.csv'

### Debug mode (enable it only to investigate the execution flow)

DEBUG=false # it can be true or false

### Initial checks

if (( $# == 1 )); then
    IP=$1
    rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])' # regex to validate an IP address
    if [[ ! $IP =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
      echo "Not valid IP: $IP" >&2
      exit 1
    fi
else
    echo 'Usage: ipinfo <IPv4 ADDRESS>'
    exit 1
fi

if ! test -f $DB; then
    echo "$DB is missing" >&2
    exit 1
fi

if ! test -f $LOCATIONS; then
    echo "$LOCATIONS is missing" >&2
    exit 1
fi

if [ -z "$(which grepcidr)" ]; then
    echo "Please install grepcidr (https://manpages.org/grepcidr)" >&2
    exit 1
fi

### Loading the entire CSV into an array
### There are no limitations on how many elements we can store in the array, assuming to have enough system memory
readarray -t array_csv < $DB
if $DEBUG; then echo "CSV loaded in memory..."; fi

### Looking for the IP in the database
### Luckily, the CSV records, and thus the array, are already sorted by "network" in CIDR notation, which is unique for each record
### We use Binary Search (https://en.wikipedia.org/wiki/Binary_search_algorithm) to reduce the complexity from O(n) to O(log_2 n)

min=0                           # index of the first element of the array
max=$(( ${#array_csv[@]} - 1 )) # index of the last element of the array
if $DEBUG; then echo "The DB contains ${#array_csv[@]} records"; fi
attempts=$(echo "l(${#array_csv[@]})/l(2)" | bc -l | awk  '{printf "%.0f\n", $1}')
if $DEBUG; then echo "We have to make at most $attempts attempts to find information about $IP"; fi
counter=0

while [ $min -lt $max ]; do
    counter=$((counter+1))
    # Compute the mean between min and max, rounded up to the superior unit
    current=`expr '(' "$min" + "$max" + 1 ')' / 2` # current array index to be checked
    if $DEBUG; then echo ""; fi
    if $DEBUG; then echo "Test $counter -> Current index of the DB: $current"; fi
    record="${array_csv[$current]}"
    IFS="," read    network geoname_id registered_country_geoname_id represented_country_geoname_id \
                    is_anonymous_proxy is_satellite_provider postal_code latitude longitude accuracy_radius <<< $record
    if $DEBUG; then echo "Checking if $IP belongs to the network: $network..."; fi
    if echo "$IP" | grepcidr $network >/dev/null; then
        echo "$IP is in the network $network";
        if $DEBUG; then echo "Geoname ID: $geoname_id"; fi
        georecord=$(cat "$LOCATIONS" | grep "$geoname_id,")
        IFS="," read    geoname_id locale_code continent_code continent_name country_iso_code country_name  \
                        subdivision_1_iso_code subdivision_1_name subdivision_2_iso_code subdivision_2_name \
                        city_name metro_code time_zone is_in_european_union <<< $georecord
        echo "Location: $city_name (Postal Code $postal_code), $subdivision_2_name, $subdivision_1_name, $country_name, $continent_name"
        echo "Approximate Coordinates (accuracy radius ${accuracy_radius}km): https://map.ofnur.com/?q=$latitude,$longitude&r=$accuracy_radius&t=$city_name, $subdivision_1_name, $country_name, $continent_name"
        if $DEBUG; then echo "Debug: we can compare the results with https://www.maxmind.com/en/geoip2-precision-demo"; fi
        break # exit the "while" loop
    else
        if $DEBUG; then echo "No, $IP is not in the network: $network"; fi
        startIP=${network%/*} # in this DB, removing the network mask from the CIDR is enough to get the start IP of the IP range
        for v in 1 2 3 4; do
            A=$(echo $IP | cut -d '.' -f$v)
            B=$(echo $startIP | cut -d '.' -f$v)
            if [ $A -lt $B ]; then
                if $DEBUG; then echo "$IP is less then $startIP"; fi
                max=`expr $current - 1`
                break # exit only the current "for" loop, continuing the "while" loop
            fi
            if [ $A -gt $B ]; then
                if $DEBUG; then echo "$IP is greater then $startIP"; fi
                min=$current
                break # exit only the current "for" loop, continuing the "while" loop
            fi
            if [ $v -eq 4 ] && [ $A -eq $B ]; then
                if $DEBUG; then echo "Debug: $IP and $startIP must be different, so the execution should never come here" >&2; fi
                if $DEBUG; then echo "Debug: \$A is $A and \$B is $B" >&2; fi
                exit -1
            fi
        done
    fi
    if ! [ $min -lt $max ]; then
        echo "$IP is not in the database. No result. Probably it is a reserved IP address (private, multicast, etc.)"
    fi
done

